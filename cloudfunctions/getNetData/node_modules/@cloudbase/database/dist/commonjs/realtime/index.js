"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const websocket_client_1 = require("./websocket-client");
const TCB = window.tcb;
const CollectionMethods = ['where'];
const originInit = TCB.init.bind(TCB);
TCB.init = function (config) {
    const app = originInit(config);
    const originDBMethod = app.database;
    app.database = function (...args) {
        const db = originDBMethod.apply(app, args);
        if (!TCB.ws) {
            TCB.ws = new websocket_client_1.RealtimeWebSocketClient({
                context: {
                    appConfig: {
                        docSizeLimit: 1000,
                        realtimePingInterval: 10000,
                        realtimePongWaitTimeout: 5000,
                        getAccessToken: app.authObj.getAccessToken.bind(app.authObj)
                    }
                }
            });
        }
        const originCollectionMethod = db.collection;
        db.collection = function (...args) {
            const collection = originCollectionMethod.apply(db, args);
            collection.watch = function (options) {
                return TCB.ws.watch(Object.assign(Object.assign({}, options), { envId: this._db.config.env, collectionName: this._coll, query: JSON.stringify(this._fieldFilters) }));
            }.bind(collection);
            const originDocMethod = collection.doc.bind(collection);
            collection.doc = function (...args) {
                const doc = originDocMethod.apply(db, args);
                doc.watch = function (options) {
                    return TCB.ws.watch(Object.assign(Object.assign({}, options), { envId: this._db.config.env, collectionName: this._coll, query: JSON.stringify({
                            _id: this.id
                        }) }));
                }.bind(doc);
                return doc;
            }.bind(collection);
            CollectionMethods.map(method => {
                const originMethod = collection[method];
                collection[method] = function (...args) {
                    const query = originMethod.apply(collection, args);
                    query.watch = function (options) {
                        return TCB.ws.watch(Object.assign(Object.assign({}, options), { envId: this._db.config.env, collectionName: this._coll, query: JSON.stringify(this._fieldFilters) }));
                    }.bind(query);
                    return query;
                }.bind(collection);
            });
            return collection;
        };
        return db;
    };
    return app;
};
